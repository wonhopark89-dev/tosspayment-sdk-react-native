"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RequestPaymentsModal = RequestPaymentsModal;
var _reactNative = require("react-native");
var _reactNativeUrlPolyfill = require("react-native-url-polyfill");
var _reactNativeWebview = _interopRequireDefault(require("react-native-webview"));
var _usePaymentWidget = require("../hooks/usePaymentWidget");
var _convertUrl = require("../utils/convertUrl");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const SuccessUrlScheme = `tosspayments://success`;
const FailUrlScheme = `tosspayments://fail`;
function RequestPaymentsModal(_ref) {
  var _context$options;
  let {
    requestPaymentHTML,
    isVisible,
    onEvaluateJavascript,
    onSuccess,
    onFail
  } = _ref;
  const context = (0, _usePaymentWidget.usePaymentWidgetContext)();
  if (requestPaymentHTML == null) {
    return /*#__PURE__*/React.createElement(React.Fragment, null);
  }
  return /*#__PURE__*/React.createElement(_reactNative.Modal, {
    animationType: 'slide',
    presentationStyle: 'pageSheet',
    onRequestClose: () => onFail({
      code: 'USER_CANCEL',
      message: '사용자가 결제를 취소하였습니다.',
      orderId: 'unknown'
    }),
    visible: isVisible
  }, /*#__PURE__*/React.createElement(_reactNative.SafeAreaView, {
    style: {
      flex: 1
    }
  }, /*#__PURE__*/React.createElement(_reactNativeWebview.default, {
    androidLayerType: 'none',
    source: {
      html: requestPaymentHTML,
      baseUrl: ((_context$options = context.options) === null || _context$options === void 0 || (_context$options = _context$options.brandpay) === null || _context$options === void 0 ? void 0 : _context$options.redirectUrl) ?? 'https://tosspayments.com'
    },
    webviewDebuggingEnabled: true,
    originWhitelist: ['*'],
    injectedJavaScript: `
        window.PaymentWidgetReactNativeSDK = {
          message: {
            postMessage: function(message) {
              window.ReactNativeWebView.postMessage(message);
            }
          },
          error: {
            postMessage: function(error) {
              window.ReactNativeWebView.postMessage(JSON.stringify({
                name: 'error', 
                params: JSON.parse(error)
              }));
            }
          },
        };
        true;
        `,
    onMessage: event => {
      if (event.nativeEvent.data !== undefined) {
        const jsonObject = JSON.parse(event.nativeEvent.data);
        switch (jsonObject.name) {
          case 'evaluateJavascriptOnPaymentMethodWidget':
            onEvaluateJavascript(jsonObject.params.script);
            break;
          default:
            _reactNative.Alert.alert(`RequestPaymentsModal에 ${jsonObject.name} 을 구현해주세요`);
        }
      }
    },
    onError: error => {
      onFail({
        code: `${error.nativeEvent.code}`,
        message: error.nativeEvent.description,
        orderId: 'unknown'
      });
    },
    onHttpError: error => {
      onFail({
        code: `${error.nativeEvent.statusCode}`,
        message: error.nativeEvent.description,
        orderId: 'unknown'
      });
    },
    onShouldStartLoadWithRequest: request => {
      if (request.url.includes(SuccessUrlScheme)) {
        const success = {};
        success.additionalParameters = {};
        const url = new _reactNativeUrlPolyfill.URL(request.url);
        const inputArray = url.search.replace('?', '').split('&');
        inputArray.forEach(item => {
          const [key, value] = item.split('=');
          if (key != null && value != null) {
            switch (key) {
              case 'paymentKey':
                success.paymentKey = value;
                break;
              case 'amount':
                success.amount = parseFloat(value);
                break;
              case 'orderId':
                success.orderId = value;
                break;
              default:
                success.additionalParameters[key] = value;
                break;
            }
          }
        });
        onSuccess(success);
        return false;
      }
      if (request.url.includes(FailUrlScheme)) {
        const fail = {};
        const url = new _reactNativeUrlPolyfill.URL(request.url);
        const inputArray = url.search.replace('?', '').split('&');
        inputArray.forEach(item => {
          const [key, value] = item.split('=');
          if (value !== undefined) {
            switch (key) {
              case 'code':
                fail.code = value;
                break;
              case 'message':
                fail.message = decodeURIComponent(value);
                break;
              case 'orderId':
                fail.orderId = value;
                break;
            }
          }
        });
        onFail(fail);
        return false;
      }
      if (request.url.startsWith('http') || request.url.startsWith('about')) {
        return true;
      }
      const reEncodedUrl = reEncode(request.url);
      const convertUrl = new _convertUrl.ConvertUrl(reEncodedUrl);
      convertUrl.launchApp().then(isLaunch => {
        if (isLaunch === false) {
          _reactNative.Alert.alert('앱 실행에 실패하였습니다.');
        }
      });
      return false;
    }
  })));
}

// V3 에서 path 에 JSON string 을 넣은 케이스가 있는데,
// colon 이 들어가 있어서 많은 URL 라이브러리가 터진다. 이를 다시 encode 해준다.
function reEncode(url) {
  const reEncodedString = url.replace(/%7B.*%7D/, match => {
    const decodedSubstring = decodeURIComponent(match);
    return encodeURIComponent(decodedSubstring);
  });
  return reEncodedString;
}
//# sourceMappingURL=RequestPaymentsModal.js.map