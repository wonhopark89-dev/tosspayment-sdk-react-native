function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React, { Component } from 'react';
import { Alert, Linking } from 'react-native';
import WebView from 'react-native-webview';
export class PaymentsWebView extends Component {
  constructor(props) {
    super(props);
    this.resolveMap = {};
    this.rejectMap = {};
    this.webRef = /*#__PURE__*/React.createRef();
  }
  injectJavaScript = javascript => {
    var _this$webRef$current;
    (_this$webRef$current = this.webRef.current) === null || _this$webRef$current === void 0 || _this$webRef$current.injectJavaScript(javascript);
  };
  onMessage = message => {
    if (message.nativeEvent.data !== undefined) {
      const jsonObject = JSON.parse(message.nativeEvent.data);
      switch (jsonObject.name) {
        case 'resolve':
          const resolve = this.resolveMap[jsonObject.params.key];
          resolve === null || resolve === void 0 || resolve(jsonObject.params.data);
          delete this.resolveMap[jsonObject.params.key];
          delete this.rejectMap[jsonObject.params.key];
          break;
        case 'reject':
          const reject = this.rejectMap[jsonObject.params.key];
          reject === null || reject === void 0 || reject(jsonObject.params.data);
          delete this.resolveMap[jsonObject.params.key];
          delete this.rejectMap[jsonObject.params.key];
          break;
        case 'changePaymentMethod':
          // do nothing;
          break;
        default:
          Alert.alert(`Widget에 ${jsonObject.name} 을 구현해주세요`);
          break;
      }
    }
  };

  /**
   * NOTE(@genie-youn): URL로 판단하지 않고 URL을 디바이스 브라우저로 열라고 명시적으로 메세지로 요청하도록 변경필요
   */
  render() {
    return /*#__PURE__*/React.createElement(WebView, _extends({
      ref: this.webRef,
      style: {
        // NOTE(JooYang): hardwareAccelerated 크래시 해결
        opacity: 0.99
      },
      onShouldStartLoadWithRequest: event => {
        if (event.mainDocumentURL != null && this.isRequiredOpenInDeviceBrowser(event.mainDocumentURL)) {
          Linking.openURL(event.mainDocumentURL);
          return false;
        }
        return true;
      }
    }, this.props));
  }

  /**
   * asyncEvaluateJavascript
   */
  async asyncEvaluateJavascript(script) {
    let randomKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    return new Promise((resolve, reject) => {
      var _this$webRef$current2;
      this.resolveMap[randomKey] = data => {
        resolve(JSON.stringify(data));
      };
      this.rejectMap[randomKey] = data => {
        reject(JSON.stringify(data));
      };
      (_this$webRef$current2 = this.webRef.current) === null || _this$webRef$current2 === void 0 || _this$webRef$current2.injectJavaScript(script);
    });
  }
  isRequiredOpenInDeviceBrowser(url) {
    const targetUrl = ['https://pgweb.tosspayments.com/tosspayments/MainPopUp.do', 'https://pages.tosspayments.com/terms/privacy/consent_address', 'https://pages.tosspayments.com/terms/privacy/consent_provide_shoppingpay', 'https://pages.tosspayments.com/terms/user', 'https://pages.tosspayments.com/terms/privacy/consent1_new', 'https://pages.tosspayments.com/terms/privacy/consent2_new'];
    return targetUrl.includes(url);
  }
}
//# sourceMappingURL=PaymentsWebView.js.map