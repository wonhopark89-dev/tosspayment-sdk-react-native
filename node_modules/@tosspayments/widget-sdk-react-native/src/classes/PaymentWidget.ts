import type { RefObject } from 'react';
import type { Amount } from '../models/Amount';
import type {
  PaymentWidgetOptions,
  RuntimeEnvironment,
} from '../models/PaymentWidgetOptions';
import type { Result } from '../models/Result';
import type { PaymentInfo } from '../models/PaymentInfo';
import type { PaymentsWebView } from '../webview/PaymentsWebView';
import { AgreementWidgetControl } from './AgreementWidgetControl';
import { PaymentMethodWidgetControl } from './PaymentMethodWidgetControl';

interface InternalPaymentWidgetOptions extends PaymentWidgetOptions {
  environment: RuntimeEnvironment;
  service: string;
}

export class PaymentWidget {
  amount?: Amount;
  clientKey: string;
  customerKey: string;
  options: InternalPaymentWidgetOptions;
  constructor(
    clientKey: string,
    customerKey: string,
    options: InternalPaymentWidgetOptions
  ) {
    this.clientKey = clientKey;
    this.customerKey = customerKey;
    this.options = options;
  }

  equals(paymentWidget: PaymentWidget | null): boolean {
    if (paymentWidget == null) {
      return false;
    }

    return (
      paymentWidget.clientKey === this.clientKey &&
      paymentWidget.customerKey === this.customerKey &&
      JSON.stringify(paymentWidget.options) === JSON.stringify(this.options)
    );
  }

  async renderPaymentMethods(
    ref: RefObject<PaymentsWebView>,
    selector: string,
    amount: Amount,
    options?: { variantKey?: string }
  ) {
    this.amount = amount;
    const methodWidgetRef = ref.current!;
    const widgetOptions = (this.options ?? {}) as any;

    methodWidgetRef?.injectJavaScript(`
    const widget = PaymentWidget('${this.clientKey}', '${
      this.customerKey
    }', ${JSON.stringify(widgetOptions)});
    const paymentMethodWidget = widget.renderPaymentMethods('#${selector}', ${JSON.stringify(
      amount
    )}, { variantKey: ${
      options?.variantKey !== undefined
        ? `'${options?.variantKey}'`
        : `undefined`
    } });
    true;
    `);

    //TODO: force-unwraping
    return new PaymentMethodWidgetControl(ref);
  }

  async renderAgeements(
    ref: RefObject<PaymentsWebView>,
    selector: string,
    options?: { variantKey?: string }
  ) {
    const agreementWidgetRef = ref?.current;
    const widgetOptions = (this.options ?? {}) as any;

    const widgetScript = `
    const widget = PaymentWidget(
      '${this.clientKey}',
      '${this.customerKey}',
      ${JSON.stringify(widgetOptions)}
    );
    `;

    const renderScript = `${
      options?.variantKey !== undefined
        ? `const agreementWidget = widget.renderAgreement('#${selector}', ${JSON.stringify(
            options
          )});`
        : `const agreementWidget = widget.renderAgreement('#${selector}');`
    }`;

    agreementWidgetRef?.injectJavaScript(`
    ${widgetScript}
    ${renderScript}
    true;
    `);

    //TODO: force-unwraping
    return new AgreementWidgetControl(ref);
  }

  async requestPayments(
    ref: RefObject<PaymentsWebView>,
    info: PaymentInfo
  ): Promise<Result> {
    const mainWidgetRef = ref?.current;

    if (mainWidgetRef == null) {
      return Promise.reject('mainWidget is undefined');
    }

    const anyInfo = info as any;
    anyInfo.successUrl = 'tosspayments://success';
    anyInfo.failUrl = 'tosspayments://fail';
    anyInfo.amount = this.amount;
    return mainWidgetRef.requestPayments(anyInfo);
  }
}
