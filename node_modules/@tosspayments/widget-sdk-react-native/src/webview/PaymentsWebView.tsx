import React, { Component } from 'react';
import { Alert, Linking } from 'react-native';
import WebView, { type WebViewProps } from 'react-native-webview';
import type { WebViewSharedProps } from 'react-native-webview/lib/WebViewTypes';
import type { Fail, Result, Success } from '../models/Result';

type PaymentsWebViewProps = WebViewSharedProps & WebViewProps;

export class PaymentsWebView extends Component<PaymentsWebViewProps> {
  webRef: React.MutableRefObject<WebView | null>;
  resolveMap: Record<string, (resolve: any) => void>;
  rejectMap: Record<string, (reject: any) => void>;
  success?: (success: Success) => void;
  fail?: (fail: Fail) => void;

  constructor(props: PaymentsWebViewProps) {
    super(props);
    this.resolveMap = {};
    this.rejectMap = {};
    this.webRef = React.createRef();
  }

  injectJavaScript: (javascript: string) => void = (javascript) => {
    this.webRef.current?.injectJavaScript(javascript);
  };

  onMessage: (message: any) => void = (message) => {
    if (message.nativeEvent.data !== undefined) {
      const jsonObject = JSON.parse(message.nativeEvent.data);
      switch (jsonObject.name) {
        case 'resolve':
          const resolve = this.resolveMap[jsonObject.params.key];
          resolve?.(jsonObject.params.data);
          delete this.resolveMap[jsonObject.params.key];
          delete this.rejectMap[jsonObject.params.key];
          break;
        case 'reject':
          const reject = this.rejectMap[jsonObject.params.key];
          reject?.(jsonObject.params.data);
          delete this.resolveMap[jsonObject.params.key];
          delete this.rejectMap[jsonObject.params.key];
          break;
        case 'changePaymentMethod':
          // do nothing;
          break;
        default:
          Alert.alert(`Widget에 ${jsonObject.name} 을 구현해주세요`);
          break;
      }
    }
  };

  render() {
    return (
      <WebView
        ref={this.webRef}
        onOpenWindow={(event) => {
          Linking.openURL(event.nativeEvent.targetUrl);
        }}
        {...this.props}
      />
    );
  }

  /**
   * asyncEvaluateJavascript
   */
  async asyncEvaluateJavascript(
    script: string,
    randomKey: string = ''
  ): Promise<string> {
    return new Promise<string>((resolve, reject) => {
      this.resolveMap[randomKey] = (data) => {
        resolve(JSON.stringify(data));
      };
      this.rejectMap[randomKey] = (data) => {
        reject(JSON.stringify(data));
      };
      this.webRef.current?.injectJavaScript(script);
    });
  }

  //TODO: 좋은 형태는 아니지만 일단 편하게 처리;;
  async requestPayments(info: any): Promise<Result> {
    return new Promise((resolve) => {
      this.success = (success) => {
        resolve({ success });
      };
      this.fail = (fail) => {
        resolve({ fail });
      };
      this.webRef.current?.injectJavaScript(`
      widget.requestPaymentForNativeSDK(${JSON.stringify(info)});
      true;
      `);
    });
  }
}
